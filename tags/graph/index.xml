<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on Evan&#39;s Site</title>
    <link>https://principlezheng.github.io/tags/graph/</link>
    <description>Recent content in Graph on Evan&#39;s Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jun 2024 11:29:21 +0530</lastBuildDate>
    <atom:link href="https://principlezheng.github.io/tags/graph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>图算法合集</title>
      <link>https://principlezheng.github.io/blogs/graph-algo/</link>
      <pubDate>Mon, 03 Jun 2024 11:29:21 +0530</pubDate>
      <guid>https://principlezheng.github.io/blogs/graph-algo/</guid>
      <description>Prim算法 Prim算法是一种用于构造最小生成树（Minimum Spanning Tree，MST）的贪心算法。在给定一个加权无向连通图的情况下，最小生成树是图的一个子图，它连接了所有的顶点而不形成任何循环，并且具有可能的最小的边权重总和。&#xA;Prim算法的工作原理是从图中的任一顶点开始，逐渐长大覆盖整个图，每一步都添加最小权重的边，直到所有的顶点都被覆盖。&#xA;例子：&#xA;1168. 水资源分配优化&#xA;村里面一共有 n 栋房子。我们希望通过建造水井和铺设管道来为所有房子供水。 对于每个房子 i，我们有两种可选的供水方案：一种是直接在房子内建造水井，成本为 wells[i - 1] （注意 -1 ，因为 索引从0开始 ）；另一种是从另一口井铺设管道引水，数组 pipes 给出了在房子间铺设管道的成本，其中每个 pipes[j] = [house1j, house2j, costj] 代表用管道将 house1j 和 house2j连接在一起的成本。连接是双向的。 请返回 为所有房子都供水的最低总成本。&#xA;Prim 算法 在加权和无向图中找到最小生成树 从一个任意顶点开始，Prim 算法通过每次添加一个顶点到树中增长最小生成树。 顶点的选择基于贪婪策略，即添加新的顶点会产生最小的成本。&#xA;本题与建立最小生成树的差别：房子可以自己打水井。&#xA;通过添加节点0为虚拟水井，可以将房子自己打水井转换成和节点0之间建立连边：&#xA;需要用到：PriorityQueue 最小堆， List&amp;lt;List&amp;lt;Pair&amp;lt;Integer, Integer&amp;raquo;&amp;gt; 邻接表表示图， HashSet记录已加入生成树的节点。&#xA;class Solution { public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) { PriorityQueue&amp;lt;Pair&amp;lt;Integer, Integer&amp;gt;&amp;gt; minHeap = new PriorityQueue&amp;lt;&amp;gt;(n, (a,b) -&amp;gt; (a.getKey() - b.</description>
    </item>
  </channel>
</rss>
