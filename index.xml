<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Evan&#39;s Site</title>
    <link>https://principlezheng.github.io/</link>
    <description>Recent content on Evan&#39;s Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 May 2024 19:53:33 +0530</lastBuildDate>
    <atom:link href="https://principlezheng.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bit Manipulation LeetCode Problems</title>
      <link>https://principlezheng.github.io/blogs/bit-manipulation-leetcode/</link>
      <pubDate>Fri, 31 May 2024 19:53:33 +0530</pubDate>
      <guid>https://principlezheng.github.io/blogs/bit-manipulation-leetcode/</guid>
      <description>Problem 1 136. Single Number&#xA;Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.&#xA;You must implement a solution with a linear runtime complexity and use only constant extra space.&#xA;Simply utilize the XOR operator&amp;rsquo;s feature: a ^ a = 0 to remove all the elements that have appeared twice:&#xA;class Solution { public int singleNumber(int[] nums) { int res = 0; for (int n : nums) { res ^= n; } return res; } } Problem 2 137.</description>
    </item>
    <item>
      <title>Netty 的 EventLoop 编排</title>
      <link>https://principlezheng.github.io/blogs/netty-eventloop/</link>
      <pubDate>Wed, 29 May 2024 19:53:33 +0530</pubDate>
      <guid>https://principlezheng.github.io/blogs/netty-eventloop/</guid>
      <description>介绍 EventLoop：事件循环对象，可以理解为在 netty 中处理数据的工人&#xA;EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。&#xA;它的继承关系比较复杂&#xA;一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法 另一条线是继承自 netty 自己的 OrderedEventExecutor， 提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop 提供了 parent 方法来看看自己属于哪个 EventLoopGroup 事件循环组&#xA;EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）&#xA;继承自 netty 自己的 EventExecutorGroup 实现了 Iterable 接口提供遍历 EventLoop 的能力 另有 next 方法获取集合中下一个 EventLoop 以一个简单的实现为例：&#xA;// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程 DefaultEventLoopGroup group = new DefaultEventLoopGroup(2); System.</description>
    </item>
    <item>
      <title>Render Math With Mathjax</title>
      <link>https://principlezheng.github.io/blogs/math/</link>
      <pubDate>Fri, 09 Dec 2022 19:53:33 +0530</pubDate>
      <guid>https://principlezheng.github.io/blogs/math/</guid>
      <description>Mathjax Math equations can be rendered using Mathjax syntax with AMS symbol support.&#xA;Optionally enable this on a per-page basis by adding mathjax: true to your frontmatter.&#xA;Then, use $$ ... $$ on a line by itself to render a block equation:&#xA;$$ | Pr_{x \leftarrow P_{1}} [A(x) = 1] - Pr_{x \leftarrow P_{2}} [A(x) = 1] | &amp;lt; \text{negligible} $$&#xA;The raw version is:&#xA;$$ | Pr_{x \leftarrow P_{1}} [A(x) = 1] - Pr_{x \leftarrow P_{2}} [A(x) = 1] | &amp;lt; \text{negligible} $$ Write in-line equations with \\( .</description>
    </item>
    <item>
      <title>Image Gallery</title>
      <link>https://principlezheng.github.io/gallery/</link>
      <pubDate>Sat, 25 Jun 2022 18:35:46 +0530</pubDate>
      <guid>https://principlezheng.github.io/gallery/</guid>
      <description></description>
    </item>
    <item>
      <title>Markdown Syntax</title>
      <link>https://principlezheng.github.io/blogs/markdown-syntax/</link>
      <pubDate>Sat, 03 Apr 2021 23:29:21 +0530</pubDate>
      <guid>https://principlezheng.github.io/blogs/markdown-syntax/</guid>
      <description>Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga.</description>
    </item>
    <item>
      <title>Emoji Support</title>
      <link>https://principlezheng.github.io/blogs/emoji-support/</link>
      <pubDate>Sat, 03 Apr 2021 22:53:58 +0530</pubDate>
      <guid>https://principlezheng.github.io/blogs/emoji-support/</guid>
      <description>Emoji can be enabled in a Hugo project in a number of ways. :zap:&#xA;Emoji Support The emojify function can be called directly in templates or Inline Shortcodes.&#xA;To enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.&#xA;The Emoji cheat sheet is a useful reference for emoji shorthand codes.&#xA;N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform.</description>
    </item>
    <item>
      <title>Placeholder Text</title>
      <link>https://principlezheng.github.io/blogs/placeholder-text/</link>
      <pubDate>Sat, 03 Apr 2021 22:41:10 +0530</pubDate>
      <guid>https://principlezheng.github.io/blogs/placeholder-text/</guid>
      <description>Lorem est tota propiore conpellat pectoribus de pectora summo.&#xA;Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&#xA;Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia!</description>
    </item>
  </channel>
</rss>
