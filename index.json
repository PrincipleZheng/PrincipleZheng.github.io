[{"content":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eEventLoop：事件循环对象，可以理解为在 netty 中处理数据的工人\u003c/p\u003e\n\u003cp\u003eEventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。\u003c/p\u003e\n\u003cp\u003e它的继承关系比较复杂\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法\u003c/li\u003e\n\u003cli\u003e另一条线是继承自 netty 自己的 OrderedEventExecutor，\n\u003cul\u003e\n\u003cli\u003e提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop\u003c/li\u003e\n\u003cli\u003e提供了 parent 方法来看看自己属于哪个 EventLoopGroup\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e事件循环组\u003c/p\u003e\n\u003cp\u003eEventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e继承自 netty 自己的 EventExecutorGroup\n\u003cul\u003e\n\u003cli\u003e实现了 Iterable 接口提供遍历 EventLoop 的能力\u003c/li\u003e\n\u003cli\u003e另有 next 方法获取集合中下一个 EventLoop\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以一个简单的实现为例：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDefaultEventLoopGroup group \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e DefaultEventLoopGroup(2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSystem.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(group.\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSystem.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(group.\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSystem.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(group.\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eio.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\nio.netty.channel.DefaultEventLoop@60f82f98\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e也可以使用 for 循环\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDefaultEventLoopGroup group \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e DefaultEventLoopGroup(2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (EventExecutor eventLoop : group) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(eventLoop);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"demo\"\u003eDemo\u003c/h2\u003e\n\u003cp\u003e服务器端两个 nio worker 工人，一个 boss 处理 accept 事件 （group 参数顺序决定的）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ServerBootstrap()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e NioEventLoopGroup(1), \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e NioEventLoopGroup(2))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003echannel\u003c/span\u003e(NioServerSocketChannel.\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003echildHandler\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ChannelInitializer\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNioSocketChannel\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einitChannel\u003c/span\u003e(NioSocketChannel ch) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ch.\u003cspan style=\"color:#a6e22e\"\u003epipeline\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eaddLast\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ChannelInboundHandlerAdapter() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echannelRead\u003c/span\u003e(ChannelHandlerContext ctx, Object msg) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    ByteBuf byteBuf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e msg \u003cspan style=\"color:#66d9ef\"\u003einstanceof\u003c/span\u003e ByteBuf \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e ((ByteBuf) msg) : \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (byteBuf \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e buf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e16\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        ByteBuf len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e byteBuf.\u003cspan style=\"color:#a6e22e\"\u003ereadBytes\u003c/span\u003e(buf, 0, byteBuf.\u003cspan style=\"color:#a6e22e\"\u003ereadableBytes\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        log.\u003cspan style=\"color:#a6e22e\"\u003edebug\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e String(buf));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }).\u003cspan style=\"color:#a6e22e\"\u003ebind\u003c/span\u003e(8080).\u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e InterruptedException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Channel channel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Bootstrap()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e NioEventLoopGroup(1))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003ehandler\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ChannelInitializer\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNioSocketChannel\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einitChannel\u003c/span\u003e(NioSocketChannel ch) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e Exception {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;init...\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    ch.\u003cspan style=\"color:#a6e22e\"\u003epipeline\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eaddLast\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e LoggingHandler(LogLevel.\u003cspan style=\"color:#a6e22e\"\u003eDEBUG\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003echannel\u003c/span\u003e(NioSocketChannel.\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003econnect\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e, 8080)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .\u003cspan style=\"color:#a6e22e\"\u003echannel\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    channel.\u003cspan style=\"color:#a6e22e\"\u003ewriteAndFlush\u003c/span\u003e(ByteBufAllocator.\u003cspan style=\"color:#a6e22e\"\u003eDEFAULT\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebuffer\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003ewriteBytes\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;wangwu\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetBytes\u003c/span\u003e()));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Thread.\u003cspan style=\"color:#a6e22e\"\u003esleep\u003c/span\u003e(2000);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    channel.\u003cspan style=\"color:#a6e22e\"\u003ewriteAndFlush\u003c/span\u003e(ByteBufAllocator.\u003cspan style=\"color:#a6e22e\"\u003eDEFAULT\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebuffer\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003ewriteBytes\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;wangwu\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetBytes\u003c/span\u003e()));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后输出\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e22:03:34 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:03:36 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:05:36 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:05:38 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:06:09 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu        \n22:06:11 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu         \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定\u003c/p\u003e\n\u003cp\u003e示意图是：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/image-20240527001846498.png\" alt=\"image-20240527001846498\"\u003e\u003c/p\u003e\n\u003cp\u003e再增加两个非 nio 工人 normalWorkers，隶属于 DefaultEventLoopGroup\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDefaultEventLoopGroup normalWorkers \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e DefaultEventLoopGroup(2); \u003cspan style=\"color:#75715e\"\u003e//there\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ServerBootstrap()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#75715e\"\u003e// boss：accept 和 worker：读写\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e NioEventLoopGroup(1), \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e NioEventLoopGroup(2))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003echannel\u003c/span\u003e(NioServerSocketChannel.\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .\u003cspan style=\"color:#a6e22e\"\u003echildHandler\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ChannelInitializer\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNioSocketChannel\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einitChannel\u003c/span\u003e(NioSocketChannel ch)  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ch.\u003cspan style=\"color:#a6e22e\"\u003epipeline\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eaddLast\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e LoggingHandler(LogLevel.\u003cspan style=\"color:#a6e22e\"\u003eDEBUG\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ch.\u003cspan style=\"color:#a6e22e\"\u003epipeline\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eaddLast\u003c/span\u003e(normalWorkers,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;myhandler\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ChannelInboundHandlerAdapter() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echannelRead\u003c/span\u003e(ChannelHandlerContext ctx, Object msg) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    ByteBuf byteBuf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e msg \u003cspan style=\"color:#66d9ef\"\u003einstanceof\u003c/span\u003e ByteBuf \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e ((ByteBuf) msg) : \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (byteBuf \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e buf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebyte\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e16\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        ByteBuf len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e byteBuf.\u003cspan style=\"color:#a6e22e\"\u003ereadBytes\u003c/span\u003e(buf, 0, byteBuf.\u003cspan style=\"color:#a6e22e\"\u003ereadableBytes\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        log.\u003cspan style=\"color:#a6e22e\"\u003edebug\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e String(buf));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }).\u003cspan style=\"color:#a6e22e\"\u003ebind\u003c/span\u003e(8080).\u003cspan style=\"color:#a6e22e\"\u003esync\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\u003c/p\u003e\n\u003cp\u003e输出\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED\n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/image-20240527001920061.png\" alt=\"image-20240527001920061\"\u003e\u003c/p\u003e\n\u003ch2 id=\"为什么\"\u003e为什么\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e性能优化\u003c/strong\u003e：通过将不同类型的任务分配到不同的线程组，可以减少单个线程或线程组的负载，避免复杂的业务逻辑影响到主I/O处理的性能，特别是在高负载环境下。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e任务专用化\u003c/strong\u003e：\u003ccode\u003eDefaultEventLoopGroup\u003c/code\u003e通常被用作第三种类型的EventLoopGroup，除了常规的\u003ccode\u003eboss\u003c/code\u003e和\u003ccode\u003eworker\u003c/code\u003e，它可以被用于处理非I/O任务或特定的业务逻辑，从而避免干扰正常的I/O处理线程。在这个示例中，\u003ccode\u003ehandler2\u003c/code\u003e使用了这个独立的\u003ccode\u003eDefaultEventLoopGroup\u003c/code\u003e来处理业务逻辑，可能是日志记录、数据处理等非直接I/O任务。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在Netty中使用\u003ccode\u003eDefaultEventLoopGroup\u003c/code\u003e为特定的\u003ccode\u003eChannelHandler\u003c/code\u003e（如在您的例子中的\u003ccode\u003ehandler2\u003c/code\u003e）提供单独的事件循环组时，可以实现异步处理，从而提高整体的I/O效率。\u003c/p\u003e\n\u003cp\u003e这是如何工作的：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e任务分配\u003c/strong\u003e：当一个客户端连接建立时，连接的\u003ccode\u003eChannel\u003c/code\u003e被初始化并分配给\u003ccode\u003eworker\u003c/code\u003e线程组中的某个\u003ccode\u003eEventLoop\u003c/code\u003e。这个\u003ccode\u003eEventLoop\u003c/code\u003e负责处理所有来自该连接的I/O事件，如数据的读取和初步处理。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e异步处理\u003c/strong\u003e：如果您为\u003ccode\u003ehandler2\u003c/code\u003e指定了一个独立的\u003ccode\u003eDefaultEventLoopGroup\u003c/code\u003e，当\u003ccode\u003ehandler1\u003c/code\u003e处理完消息并调用\u003ccode\u003ectx.fireChannelRead(msg)\u003c/code\u003e后，消息将被传递给\u003ccode\u003ehandler2\u003c/code\u003e。但是，与\u003ccode\u003ehandler1\u003c/code\u003e在相同的\u003ccode\u003eEventLoop\u003c/code\u003e中同步运行不同，\u003ccode\u003ehandler2\u003c/code\u003e将在\u003ccode\u003eDefaultEventLoopGroup\u003c/code\u003e中的某个独立的\u003ccode\u003eEventLoop\u003c/code\u003e上异步执行。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e释放原始\u003ccode\u003eEventLoop\u003c/code\u003e\u003c/strong\u003e：这种分离使得\u003ccode\u003eworker\u003c/code\u003e的\u003ccode\u003eEventLoop\u003c/code\u003e可以快速处理完与接收和初步处理消息相关的任务，然后立即回到准备处理新的I/O事件的状态。因此，该\u003ccode\u003eEventLoop\u003c/code\u003e不需要等待\u003ccode\u003ehandler2\u003c/code\u003e的处理逻辑完成，这可能涉及更复杂或耗时的操作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e提升I/O效率\u003c/strong\u003e：这样做的直接效益是提高了I/O效率，因为原始的\u003ccode\u003eEventLoop\u003c/code\u003e不会被长时间的业务逻辑处理阻塞，从而可以继续接受和处理来自其他客户端的新连接或数据。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e通过这种方式，您可以更有效地利用系统的线程资源，确保网络I/O操作的高响应性和高吞吐量，同时还能处理复杂的业务逻辑，从而使得整体应用架构更加健壮和可扩展。这是Netty框架设计的重要优势之一，允许开发者根据具体的应用需求灵活地管理不同类型的任务。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e问题：这个worker的EventLoop和channel绑定的吗？这个channel上的操作没结束，为什么他可以去做别的？\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在Netty中，每个\u003ccode\u003eChannel\u003c/code\u003e一旦被注册到某个\u003ccode\u003eEventLoop\u003c/code\u003e，确实会与该\u003ccode\u003eEventLoop\u003c/code\u003e绑定，并且在该\u003ccode\u003eEventLoop\u003c/code\u003e的生命周期内保持绑定。这意味着同一个\u003ccode\u003eChannel\u003c/code\u003e的所有I/O操作都是由同一个\u003ccode\u003eEventLoop\u003c/code\u003e单线程处理，以保证操作的线程安全和顺序性。\u003c/p\u003e\n\u003cp\u003e然而，尽管每个\u003ccode\u003eChannel\u003c/code\u003e与一个\u003ccode\u003eEventLoop\u003c/code\u003e绑定，这并不意味着该\u003ccode\u003eEventLoop\u003c/code\u003e不能处理其他\u003ccode\u003eChannel\u003c/code\u003e的事件。一个\u003ccode\u003eEventLoop\u003c/code\u003e可以同时管理多个\u003ccode\u003eChannel\u003c/code\u003e。这是通过事件循环机制实现的，\u003ccode\u003eEventLoop\u003c/code\u003e会轮询它管理的所有\u003ccode\u003eChannel\u003c/code\u003e的事件队列，并处理这些事件。这种设计允许\u003ccode\u003eEventLoop\u003c/code\u003e在等待一个\u003ccode\u003eChannel\u003c/code\u003e的I/O操作完成时，转而处理其他\u003ccode\u003eChannel\u003c/code\u003e的事件，从而提高资源的利用率。\u003c/p\u003e\n\u003ch2 id=\"切换操作是如何实现\"\u003e切换操作是如何实现\u003c/h2\u003e\n\u003cp\u003e关键代码 \u003ccode\u003eio.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einvokeChannelRead\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efinal\u003c/span\u003e AbstractChannelHandlerContext next, Object msg) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efinal\u003c/span\u003e Object m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e next.\u003cspan style=\"color:#a6e22e\"\u003epipeline\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etouch\u003c/span\u003e(ObjectUtil.\u003cspan style=\"color:#a6e22e\"\u003echeckNotNull\u003c/span\u003e(msg, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e), next);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 下一个 handler 的事件循环是否与当前的事件循环是同一个线程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    EventExecutor executor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e next.\u003cspan style=\"color:#a6e22e\"\u003eexecutor\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 是，直接调用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (executor.\u003cspan style=\"color:#a6e22e\"\u003einEventLoop\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        next.\u003cspan style=\"color:#a6e22e\"\u003einvokeChannelRead\u003c/span\u003e(m);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        executor.\u003cspan style=\"color:#a6e22e\"\u003eexecute\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Runnable() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003e@Override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                next.\u003cspan style=\"color:#a6e22e\"\u003einvokeChannelRead\u003c/span\u003e(m);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e如果两个 handler 绑定的是同一个线程，那么就直接调用\u003c/li\u003e\n\u003cli\u003e否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNioEventLoopGroup nioWorkers \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e NioEventLoopGroup(2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elog.\u003cspan style=\"color:#a6e22e\"\u003edebug\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;server start...\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThread.\u003cspan style=\"color:#a6e22e\"\u003esleep\u003c/span\u003e(2000);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enioWorkers.\u003cspan style=\"color:#a6e22e\"\u003eexecute\u003c/span\u003e(()\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    log.\u003cspan style=\"color:#a6e22e\"\u003edebug\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;normal task...\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task...\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e可以用来执行耗时较长的任务\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e参考：B站黑马Netty, netty.io文档\u003c/p\u003e\n","description":"","image":"/images/blogs/nettty.png","permalink":"https://principlezheng.github.io/blogs/netty-eventloop/","title":"Netty 的 EventLoop 编排"},{"content":"\u003ch2 id=\"mathjax\"\u003eMathjax\u003c/h2\u003e\n\u003cp\u003eMath equations can be rendered using \u003ca href=\"https://www.mathjax.org\"\u003eMathjax\u003c/a\u003e syntax with AMS symbol support.\u003c/p\u003e\n\u003cp\u003eOptionally enable this on a per-page basis by adding \u003ccode\u003emathjax: true\u003c/code\u003e to your frontmatter.\u003c/p\u003e\n\u003cp\u003eThen, use \u003ccode\u003e$$ ... $$\u003c/code\u003e on a line by itself to render a block equation:\u003c/p\u003e\n\u003cp\u003e$$ | Pr_{x \\leftarrow P_{1}} [A(x) = 1] - Pr_{x \\leftarrow P_{2}} [A(x) = 1] | \u0026lt; \\text{negligible} $$\u003c/p\u003e\n\u003cp\u003eThe raw version is:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$$ | Pr_{x \\leftarrow P_{1}} [A(x) = 1] - Pr_{x \\leftarrow P_{2}} [A(x) = 1] | \u0026lt; \\text{negligible} $$\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWrite in-line equations with \u003ccode\u003e\\\\( ... \\\\)\u003c/code\u003e , like \\( x^n / y \\) . It\u0026rsquo;s easy!\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eWrite in-line equations with `\\\\( ... \\\\)` , like \\\\( x^n / y \\\\) . It\u0026#39;s easy!\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":"/images/mathjax.png","permalink":"https://principlezheng.github.io/blogs/math/","title":"Render Math With Mathjax"},{"content":"","description":"My gallery :earth_asia:","image":null,"permalink":"https://principlezheng.github.io/gallery/","title":"Image Gallery"},{"content":"\u003ch2 id=\"paragraph\"\u003eParagraph\u003c/h2\u003e\n\u003cp\u003eXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\u003c/p\u003e\n\u003cp\u003eItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\u003c/p\u003e\n\u003ch2 id=\"blockquotes\"\u003eBlockquotes\u003c/h2\u003e\n\u003cp\u003eThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a \u003ccode\u003efooter\u003c/code\u003e or \u003ccode\u003ecite\u003c/code\u003e element, and optionally with in-line changes such as annotations and abbreviations.\u003c/p\u003e\n\u003ch3 id=\"blockquote-without-attribution\"\u003eBlockquote without attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTiam, ad mint andaepu dandae nostion secatur sequo quae.\n\u003cstrong\u003eNote\u003c/strong\u003e that you can use \u003cem\u003eMarkdown syntax\u003c/em\u003e within a blockquote.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"blockquote-with-attribution\"\u003eBlockquote with attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\u003c/p\u003e\n— \u003ccite\u003eRob Pike\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/cite\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"tables\"\u003eTables\u003c/h2\u003e\n\u003cp\u003eTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eAge\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eBob\u003c/td\u003e\n\u003ctd\u003e27\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAlice\u003c/td\u003e\n\u003ctd\u003e23\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"inline-markdown-within-tables\"\u003eInline Markdown within tables\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eInline   \u003c/th\u003e\n\u003cth\u003eMarkdown   \u003c/th\u003e\n\u003cth\u003eIn   \u003c/th\u003e\n\u003cth\u003eTable\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eitalics\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003ebold\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cdel\u003estrikethrough\u003c/del\u003e   \u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecode\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"code-blocks\"\u003eCode Blocks\u003c/h2\u003e\n\u003ch3 id=\"code-block-with-backticks\"\u003eCode block with backticks\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"code-block-indented-with-four-spaces\"\u003eCode block indented with four spaces\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\n\u0026lt;head\u0026gt;\n  \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\n  \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n  \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"code-block-with-hugos-internal-highlight-shortcode\"\u003eCode block with Hugo\u0026rsquo;s internal highlight shortcode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;Example HTML5 Document\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etitle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehead\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;Test\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"list-types\"\u003eList Types\u003c/h2\u003e\n\u003ch3 id=\"ordered-list\"\u003eOrdered List\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eFirst item\u003c/li\u003e\n\u003cli\u003eSecond item\u003c/li\u003e\n\u003cli\u003eThird item\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"unordered-list\"\u003eUnordered List\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eList item\u003c/li\u003e\n\u003cli\u003eAnother item\u003c/li\u003e\n\u003cli\u003eAnd another item\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"nested-list\"\u003eNested list\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eItem\n\u003col\u003e\n\u003cli\u003eFirst Sub-item\u003c/li\u003e\n\u003cli\u003eSecond Sub-item\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"headings\"\u003eHeadings\u003c/h2\u003e\n\u003cp\u003eThe following HTML \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e—\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e elements represent six levels of section headings. \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e is the highest section level while \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e is the lowest.\u003c/p\u003e\n\u003ch1 id=\"h1\"\u003eH1\u003c/h1\u003e\n\u003ch2 id=\"h2\"\u003eH2\u003c/h2\u003e\n\u003ch3 id=\"h3\"\u003eH3\u003c/h3\u003e\n\u003ch4 id=\"h4\"\u003eH4\u003c/h4\u003e\n\u003ch5 id=\"h5\"\u003eH5\u003c/h5\u003e\n\u003ch6 id=\"h6\"\u003eH6\u003c/h6\u003e\n\u003ch2 id=\"other-elements--abbr-sub-sup-kbd-mark\"\u003eOther Elements — abbr, sub, sup, kbd, mark\u003c/h2\u003e\n\u003cp\u003e\u003cabbr title=\"Graphics Interchange Format\"\u003eGIF\u003c/abbr\u003e is a bitmap image format.\u003c/p\u003e\n\u003cp\u003eH\u003csub\u003e2\u003c/sub\u003eO\u003c/p\u003e\n\u003cp\u003eX\u003csup\u003en\u003c/sup\u003e + Y\u003csup\u003en\u003c/sup\u003e = Z\u003csup\u003en\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003ePress \u003ckbd\u003e\u003ckbd\u003eCTRL\u003c/kbd\u003e+\u003ckbd\u003eALT\u003c/kbd\u003e+\u003ckbd\u003eDelete\u003c/kbd\u003e\u003c/kbd\u003e to end the session.\u003c/p\u003e\n\u003cp\u003eMost \u003cmark\u003esalamanders\u003c/mark\u003e are nocturnal, and hunt for insects, worms, and other small creatures.\u003c/p\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eThe above quote is excerpted from Rob Pike\u0026rsquo;s \u003ca href=\"https://www.youtube.com/watch?v=PAAkCSZUG1c\"\u003etalk\u003c/a\u003e during Gopherfest, November 18, 2015.\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n","description":"","image":"/images/post.jpg","permalink":"https://principlezheng.github.io/blogs/markdown-syntax/","title":"Markdown Syntax"},{"content":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways. :zap:\u003c/p\u003e\n\u003ch2 id=\"emoji-support\"\u003eEmoji Support\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href=\"https://gohugo.io/functions/emojify/\"\u003eemojify\u003c/a\u003e function can be called directly in templates or \u003ca href=\"https://gohugo.io/templates/shortcode-templates/#inline-shortcodes\"\u003eInline Shortcodes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo enable emoji globally, set \u003ccode\u003eenableEmoji\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e in your site’s \u003ca href=\"https://gohugo.io/getting-started/configuration/\"\u003econfiguration\u003c/a\u003e and then you can type emoji shorthand codes directly in content files; e.g.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"http://www.emoji-cheat-sheet.com/\"\u003eEmoji cheat sheet\u003c/a\u003e is a useful reference for emoji shorthand codes.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eN.B.\u003c/strong\u003e The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.emoji {\n  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;\n}\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":"/images/post.jpg","permalink":"https://principlezheng.github.io/blogs/emoji-support/","title":"Emoji Support"},{"content":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de pectora summo.\u003c/p\u003e\n\u003cp\u003eRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eExierant elisi ambit vivere dedere\u003c/li\u003e\n\u003cli\u003eDuce pollice\u003c/li\u003e\n\u003cli\u003eEris modo\u003c/li\u003e\n\u003cli\u003eSpargitque ferrea quos palude\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eComas hunc haec pietate fetum procerum dixit\u003c/li\u003e\n\u003cli\u003ePost torum vates letum Tiresia\u003c/li\u003e\n\u003cli\u003eFlumen querellas\u003c/li\u003e\n\u003cli\u003eArcanaque montibus omnes\u003c/li\u003e\n\u003cli\u003eQuidem et\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"vagus-elidunt\"\u003eVagus elidunt\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon\"\u003eThe Van de Graaf Canon\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"mane-refeci-capiebant-unda-mulcebat\"\u003eMane refeci capiebant unda mulcebat\u003c/h2\u003e\n\u003cp\u003eVicta caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\u003c/p\u003e\n\u003cp\u003eIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\u003c/p\u003e\n\u003cp\u003eEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\u003c/p\u003e\n","description":"","image":"/images/post.jpg","permalink":"https://principlezheng.github.io/blogs/placeholder-text/","title":"Placeholder Text"}]